
# python wrapper for package gitlab.com/lukser/ulauncher-animego/animego/animego within overall package animego
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=./build ./animego

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _animego
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from animego import animego
# and then refer to everything using animego. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice []*animego.Item
class Slice_Ptr_animego_Item(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_animego.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_animego.IncRef(self.handle)
		else:
			self.handle = _animego.Slice_Ptr_animego_Item_CTor()
			_animego.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_Ptr_animego_Item.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_animego.DecRef(self.handle)
	def __str__(self):
		s = 'animego.Slice_Ptr_animego_Item len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'animego.Slice_Ptr_animego_Item([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _animego.Slice_Ptr_animego_Item_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _animego.Slice_Ptr_animego_Item_len(self.handle)
				return Slice_Ptr_animego_Item(handle=_animego.Slice_Ptr_animego_Item_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return Item(handle=_animego.Slice_Ptr_animego_Item_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_animego.Slice_Ptr_animego_Item_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_Ptr_animego_Item.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _animego.Slice_Ptr_animego_Item_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_animego.Slice_Ptr_animego_Item_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
All = "all"
Anime = "anime"
Manga = "manga"


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct animego.Item
class Item(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_animego.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_animego.IncRef(self.handle)
		else:
			self.handle = _animego.animego_Item_CTor()
			_animego.IncRef(self.handle)
			if  0 < len(args):
				self.Title = args[0]
			if "Title" in kwargs:
				self.Title = kwargs["Title"]
			if  1 < len(args):
				self.Romaji = args[1]
			if "Romaji" in kwargs:
				self.Romaji = kwargs["Romaji"]
			if  2 < len(args):
				self.Url = args[2]
			if "Url" in kwargs:
				self.Url = kwargs["Url"]
			if  3 < len(args):
				self.ImageUrl = args[3]
			if "ImageUrl" in kwargs:
				self.ImageUrl = kwargs["ImageUrl"]
			if  4 < len(args):
				self.Genre = args[4]
			if "Genre" in kwargs:
				self.Genre = kwargs["Genre"]
			if  5 < len(args):
				self.Year = args[5]
			if "Year" in kwargs:
				self.Year = kwargs["Year"]
	def __del__(self):
		_animego.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'animego.Item{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'animego.Item ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Title(self):
		return _animego.animego_Item_Title_Get(self.handle)
	@Title.setter
	def Title(self, value):
		if isinstance(value, go.GoClass):
			_animego.animego_Item_Title_Set(self.handle, value.handle)
		else:
			_animego.animego_Item_Title_Set(self.handle, value)
	@property
	def Romaji(self):
		return _animego.animego_Item_Romaji_Get(self.handle)
	@Romaji.setter
	def Romaji(self, value):
		if isinstance(value, go.GoClass):
			_animego.animego_Item_Romaji_Set(self.handle, value.handle)
		else:
			_animego.animego_Item_Romaji_Set(self.handle, value)
	@property
	def Url(self):
		return _animego.animego_Item_Url_Get(self.handle)
	@Url.setter
	def Url(self, value):
		if isinstance(value, go.GoClass):
			_animego.animego_Item_Url_Set(self.handle, value.handle)
		else:
			_animego.animego_Item_Url_Set(self.handle, value)
	@property
	def ImageUrl(self):
		return _animego.animego_Item_ImageUrl_Get(self.handle)
	@ImageUrl.setter
	def ImageUrl(self, value):
		if isinstance(value, go.GoClass):
			_animego.animego_Item_ImageUrl_Set(self.handle, value.handle)
		else:
			_animego.animego_Item_ImageUrl_Set(self.handle, value)
	@property
	def Genre(self):
		return _animego.animego_Item_Genre_Get(self.handle)
	@Genre.setter
	def Genre(self, value):
		if isinstance(value, go.GoClass):
			_animego.animego_Item_Genre_Set(self.handle, value.handle)
		else:
			_animego.animego_Item_Genre_Set(self.handle, value)
	@property
	def Year(self):
		return _animego.animego_Item_Year_Get(self.handle)
	@Year.setter
	def Year(self, value):
		if isinstance(value, go.GoClass):
			_animego.animego_Item_Year_Set(self.handle, value.handle)
		else:
			_animego.animego_Item_Year_Set(self.handle, value)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def Search(query, searchType):
	"""Search(str query, str searchType) []object"""
	return Slice_Ptr_animego_Item(handle=_animego.animego_Search(query, searchType))


